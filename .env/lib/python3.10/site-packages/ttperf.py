import argparse
import subprocess
import re
import pandas as pd
import os
import sys

def find_csv_path(output):
    # Example pattern: Saved result csv file: profiler_output/resnet-2025-07-14-10-32.csv
    match = re.search(r"Saved result csv file:\s*(.*\.csv)", output)
    if match:
        return match.group(1).strip()
    return None

def extract_duration(csv_path):
    try:
        df = pd.read_csv(csv_path)
        if "DEVICE_KERNEL_DURATION [ns]" not in df.columns:
            print("‚ùå Column 'DEVICE_KERNEL_DURATION [ns]' not found.")
            sys.exit(1)
        total = df["DEVICE_KERNEL_DURATION [ns]"].sum()
        print(f"‚úÖ Total DEVICE_KERNEL_DURATION: {total} ns")
    except Exception as e:
        print(f"‚ùå Error reading CSV: {e}")
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description="Run profiling and extract DEVICE_KERNEL_DURATION")
    parser.add_argument("command", nargs=argparse.REMAINDER, help="Command to run profiler")
    args = parser.parse_args()

    if not args.command:
        print("‚ùå No command provided.")
        sys.exit(1)

    print(f"‚ñ∂Ô∏è Running: {' '.join(args.command)}")
    try:
        result = subprocess.run(args.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
        print(result.stdout)  # Optional: comment out if too noisy

        csv_path = find_csv_path(result.stdout)
        if not csv_path:
            print("‚ùå CSV file path not found in profiler output.")
            sys.exit(1)

        print(f"üìÑ Found CSV: {csv_path}")
        extract_duration(csv_path)

    except Exception as e:
        print(f"‚ùå Failed to run command: {e}")
        sys.exit(1)